# Acknowledgements - https://github.com/adrianhurt/play-silhouette-credentials-seed

play {
	modules {
	   enabled += "modules.ApplicationModule"
	}
	crypto {
	   # change me - see http://www.playframework.com/documentation/latest/ApplicationSecret
	   secret="wKZQxIc7:;oyOZ2N=C3C=UqYM1p>_`py:JAdpY;JBri7N?giFgp=Yj<QIlC<UFpv"
	}
	i18n {
	   langs= ["en"]
	}
  	http {
	  ## Router
	  # https://www.playframework.com/documentation/latest/JavaRouting
	  # https://www.playframework.com/documentation/latest/ScalaRouting
	  # ~~~~~
	  # Define the Router object to use for this application.
	  # This router will be looked up first when the application is starting up,
	  # so make sure this is the entry point.
	  # Furthermore, it's assumed your route file is named properly.
	  # So for an application router like `my.application.Router`,
	  # you may need to define a router file `conf/my.application.routes`.
	  # Default to Routes in the root package (aka "apps" folder) (and conf/routes)
	  #router = my.application.Router
	
	  ## Action Creator
	  # https://www.playframework.com/documentation/latest/JavaActionCreator
	  # ~~~~~
	  #actionCreator = null
	
	  ## ErrorHandler
	  # https://www.playframework.com/documentation/latest/JavaRouting
	  # https://www.playframework.com/documentation/latest/ScalaRouting
	  # ~~~~~
	  # If null, will attempt to load a class called ErrorHandler in the root package,
	  # Using default handler
	  # errorHandler = "security.ErrorHandler"
	
	  ## Filters
	  # https://www.playframework.com/documentation/latest/ScalaHttpFilters
	  # https://www.playframework.com/documentation/latest/JavaHttpFilters
	  # ~~~~~
	  # Filters run code on every request. They can be used to perform
	  # common logic for all your actions, e.g. adding common headers.
	  # Defaults to "Filters" in the root package (aka "apps" folder)
	  # Alternatively you can explicitly register a class here.
	  filters = "security.Filters"
	
	  ## Session & Flash
	  # https://www.playframework.com/documentation/latest/JavaSessionFlash
	  # https://www.playframework.com/documentation/latest/ScalaSessionFlash
	  # ~~~~~
	  session {
	    # Sets the cookie to be sent only over HTTPS.
	    #secure = true
	
	    # Sets the cookie to be accessed only by the server.
	    httpOnly = true
	
	    # Sets the max-age field of the cookie to 5 minutes.
	    # NOTE: this only sets when the browser will discard the cookie. Play will consider any
	    # cookie value with a valid signature to be a valid session forever. To implement a server side session timeout,
	    # you need to put a timestamp in the session and check it at regular intervals to possibly expire it.
	    maxAge = 300
	
	    # Sets the domain on the session cookie.
	    #domain = "example.com"
	  }
	
	  flash {
	    # Sets the cookie to be sent only over HTTPS.
	    #secure = true
	
	    # Sets the cookie to be accessed only by the server.
	    #httpOnly = false
	  }
    }
	## Filters
	# https://www.playframework.com/documentation/latest/Filters
	# https://www.playframework.com/documentation/2.5.x/resources/confs/filters-helpers/reference.conf
	# ~~~~~
	# There are a number of built-in filters that can be enabled and configured
	# to give Play greater security.  You must enable this by adding to build.sbt:
	#
	# libraryDependencies += filters
	#
	filters {
	  ## CORS filter configuration
	  # Not implemented. See for how to configure https://www.playframework.com/documentation/latest/CorsFilter
	
	  ## CSRF Filter
	  # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
	  # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
	  # ~~~~~
	  # Play supports multiple methods for verifying that a request is not a CSRF request.
	  # The primary mechanism is a CSRF token. This token gets placed either in the query string
	  # or body of every form submitted, and also gets placed in the users session.
	  # Play then verifies that both tokens are present and match.
	  csrf {
	    # Sets the cookie to be sent only over HTTPS
	    #cookie.secure = true
	
	    # Defaults to CSRFErrorHandler in the root package.
	    #errorHandler = MyCSRFErrorHandler
	    
	    cookie.name="PLAY_CSRF_TOKEN"
	    contentType.blackList=[ 
            "application/x-www-form-urlencoded",
            "multipart/form-data",
            "text/plain",
            "application/json"
        ]
	  }
	
	  ## Security headers filter configuration
	  # https://www.playframework.com/documentation/latest/SecurityHeaders
	  # ~~~~~
	  # Defines security headers that prevent XSS attacks.
	  # If enabled, then all options are set to the below configuration by default:
	  headers {
	    # The X-Frame-Options header. If null, the header is not set.
	    frameOptions = "DENY"
	
	    # The X-XSS-Protection header. If null, the header is not set.
	    xssProtection = "1; mode=block"
	
	    # The X-Content-Type-Options header. If null, the header is not set.
	    contentTypeOptions = "nosniff"
	
	    # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
	    permittedCrossDomainPolicies = "master-only"
	
	    # The Content-Security-Policy header. If null, the header is not set.
	    contentSecurityPolicy = "default-src 'self' maxcdn.bootstrapcdn.com; font-src 'self' 'unsafe-inline' data: maxcdn.bootstrapcdn.com; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self' 'unsafe-inline' maxcdn.bootstrapcdn.com cdnjs.cloudflare.com;"
	  }
	
	  ## Allowed hosts filter configuration
	  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
	  # ~~~~~
	  # Play provides a filter that lets you configure which hosts can access your application.
	  # This is useful to prevent cache poisoning attacks.
	  hosts {
	    # Allow requests to example.com, its subdomains, and localhost:9000.
	    #allowed = [".example.com", "localhost:9000"]
	  }
	}	
}

ui {
  paging {
     size=50
  } 
}

security {
     max_failed_login_attempts=3
     password_policy {
        minimum_length=8
        must_have_one_digit=true
        must_have_one_non_alpha=false
        must_have_one_upper_case=true
        must_have_one_lower_case=true
        policy_message="Password must be a minimum of 8 characters, have 1 digit and 1 upper and lowercase. Or alphabetical/number/Querty sequences."
     }
}

slick {
  dbs {
     default {
        driver="slick.driver.PostgresDriver$"
        db {
           driver=org.postgresql.Driver
           url="jdbc:postgresql://localhost:5432/myapp?stringtype=unspecified"
           user="myapp"
           password="myapp"
       }
     }
  }
}     
     
slick {
  default="models.*"
}

silhouette {
  # JWT authenticator settings
  authenticator.headerName="X-Auth-Token"
  authenticator.issuerClaim="angularjs-play"
  authenticator.encryptSubject=true
  authenticator.authenticatorExpiry=12 hours
  authenticator.sharedSecret="changeme"

  authenticator.rememberMe.authenticatorExpiry=30 days
  authenticator.rememberMe.authenticatorIdleTimeout=5 days

  authenticator.crypter.key = "[changeme]" // A unique encryption key
 }